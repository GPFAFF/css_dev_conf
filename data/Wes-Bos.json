{
  "data":
    {
      "nameDisplay": "@wesbos",
      "title": "What's new in JavaScript",
      "picture": "https://pbs.twimg.com/profile_images/877525007185858562/7G9vGTca_400x400.jpg",
      "slides": "https://wesbos.github.io/future-js/#1",
      "twitter": "https://twitter.com/wesbos",
      "info": [
        {
          "headline": "Promises",
          "points": [
            {
              "topic": "Promises are an IOU for something that returns something in the future (AJAX call, access to webcam, resize image)."
            },
            {
              "topic": "Most new browser APIs are built on promises or observables.  (ex. RxJS, Fetch, axios, web animation api, payment requests)."
            },
            {
              "topic": "Beauty of promises is that you can avoid call back hell."
            },
            {
              "topic": "However .then() is still kinda callback-y."
            }
          ]
        },
        {
          "headline": "Enter async + await",
          "points": [
            {
              "topic": "JavaScript waits for no one. It's like this kid that's like 'I want some data' but then goes off and does something else before the data is ready. - Wes Bos"
            },
            {
              "topic": "JavaScript is almost entirely async and non blocking"
            },
            {
              "topic": "Code your function with async.  Code the async function you're waiting for that returns an asynchronous repsonse like a Promise with await"
            },
            {
              "topic": "When an async function is called, it returns a Promise. When the async function returns a value, the Promise will be resolved with the returned value.  When the async function throws an exception or some value, the Promise will be rejected with the thrown value.  Uses analogy of making breakfast.  Do you need to make your coffee first before starting breakfast.  No you can do them"
            },
            {
              "topic": "An async function can contain an await expression, that pauses the execution of the async function and waits for the passed Promise's resolution, and then resumes the async function's execution and returns the resolved value."
            },
            {
              "topic": "The purpose of async/await functions is to simplify the behavior of using promises synchronously and to perform some behavior on a group of Promises. Just as Promises are similar to structured callbacks, async/await is similar to combining generators and promises."
            },
            {
              "topic": "try/catch for error handling, async functions return a promise."
            }
          ]
        },
        {
          "headline": "Intersection Observer",
          "points": [
            {
              "topic": "How do you know when an element is on screen?"
            },
            {
              "topic": "Comparable to scrollTop,  doesn't take a scroll event listener"
            },
            {
              "topic": "With Intersection Observer you can be alerted when an element is fully or partially scrolled into or out of view. Animate elements on scroll. Lazy load images. Sticky headers"
            }
          ]
        },
        {
          "headline": "Payment Request API",
          "points": [
            {
              "topic": "New standard to request billing and shipping information from user. Can pass to any credit card processing third party."
            },
            {
              "topic": "Your browser does not charge your card, only creates token to pass to your service."
            },
            {
              "topic": "Is it secure?  Yes, you don't handle the CC numbers you just pass the token."
            }
          ]
        }
      ]
    }
}